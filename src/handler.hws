@INCLUDE "StringLib/StringUtils.hws"
@INCLUDE "request.hws"
@INCLUDE "response.hws"
@INCLUDE "plugins/files.hws"

Global Handler = {}
Handler.log = {}
Handler.callback = Function() EndFunction
Handler.plugins = {}

Function Handler:PluginsAlterRequestResponseMetatable()
	DebugPrint("Handler:PluginsAlterRequestResponseMetatable()")
    For _, plugin In IPairs(self.plugins)
        If GetType(RawGet(plugin, "alterrequestresponsemetatable")) = #FUNCTION
            Local stop = plugin:AlterRequestResponseMetatable(Request, Response)
            If stop Then Return (stop)
        EndIf
    Next
EndFunction

Function Handler:New(callback, location, plugins, logger)
	DebugPrint("Handler:New()")
    If GetType(logger) <> #TABLE Then logger = {}
    If GetType(callback) <> #FUNCTION Then callback = Function(req, res) Return (True) EndFunction
    If GetType(plugins) <> #TABLE Then plugins = {}

    Local instance = CopyTable(self)
    instance.log = logger
    instance.callback = callback
    instance.plugins = plugins
    
    If Not StringUtils.IsEmpty(location)
        instance.plugins[TableItems(instance.plugins)] = Files:New({
            location = location,
            defalt = "/index.html"
        })
        instance.log:Debug(FormatStr("Handler created, location: %s", location))
    Else
        instance.log:Debug("Handler created, without location")
    EndIf

    instance:PluginsAlterRequestResponseMetatable()
    Return (instance)
EndFunction

Function Handler:PluginsNewConnection(client)
	DebugPrint("Handler:PluginsNewConnection()")
    For _, plugin In IPairs(self.plugins)
        If GetType(RawGet(plugin, "newconnection")) = #FUNCTION
            client = plugin:NewConnection(client, self)
            If IsNil(client) Then Return (False)
        EndIf
    Next
    Return (client)
EndFunction

Function Handler:PluginsNewRequestResponse(req, res)
	DebugPrint("Handler:PluginsNewRequestResponse()")
    For _, plugin In IPairs(self.plugins)
        If GetType(RawGet(plugin, "newrequestresponse")) = #FUNCTION
            Local stop = plugin:NewRequestResponse(req, res)
            If stop Then Return (stop)
        EndIf
    Next
EndFunction

Function Handler:PluginsBeforeProcess(req, res)
	DebugPrint("Handler:PluginsBeforeProcess()")
    For _, plugin In IPairs(self.plugins)
        If GetType(RawGet(plugin, "beforeprocess")) = #FUNCTION
            Local stop = plugin:BeforeProcess(req, res)
            If stop Then Return (stop)
        EndIf
    Next
EndFunction

Function Handler:PluginsAfterProcess(req, res)
	DebugPrint("Handler:PluginsAfterProcess()")
    For _, plugin In IPairs(self.plugins)
        If GetType(RawGet(plugin, "afterprocess")) = #FUNCTION
            Local stop = plugin:AfterProcess(req, res)
            If stop Then Return (stop)
        EndIf
    Next
EndFunction

Function Handler:PluginsProcessFile(req, res, filename)
	DebugPrint("Handler:PluginsProcessFile()")
    For _, plugin In IPairs(self.plugins)
        If GetType(RawGet(plugin, "processfile")) = #FUNCTION
            Local stop = plugin:ProcessFile(req, res, filename)
            If stop Then Return (stop)
        EndIf
    Next
EndFunction

Function Handler:ProcessBodyData(data, stayOpen, res)
	DebugPrint("Handler:ProcessBodyData()")
    Local localData = data
    For _, plugin In IPairs(self.plugins)
        If GetType(RawGet(plugin, "processbodydata")) = #FUNCTION
            localData = plugin:ProcessBodyData(localData, stayOpen, res.request, res)
        EndIf
    Next

    Return (localData)
EndFunction

Function Handler:ProcessRequest(port, client, server)
	DebugPrint("Handler:ProcessRequest()")
    client = self:PluginsNewConnection(client)
    If IsNil(client)
        Return (False)
    EndIf

    Local req = Request:New(port, client, server, self)
    Local res = req.response

    Local method = req:Method()
    If StringUtils.IsEmpty(method)
		DebugPrint("Closing client from Handler:ProcessRequest() due to empty method")
        client:Close()
        Return ()
    EndIf

    Local stop = self:PluginsNewRequestResponse(req, res)
    If stop Then Return ()

    If GetType(RawGet(self, "callback")) = #FUNCTION
        res:StatusCode(200)
        res.headers = {}
        res:AddHeader("Content-Type", "text/html")
        stop = self.callback(req, res)
        If stop Then Return ()
    EndIf

    If Not res.closed
        res:WriteDefaultErrorMessage(404)
    EndIf
EndFunction
