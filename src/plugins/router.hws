;- A plugin that routes requests based on path and method.
; Supports path parameters.
;
; The `routes` table to configure the router is a hash-table where the keys are the path, and
; the value is another hash-table. The second hash-table has the method as the key, and the
; callbacks as the values.
; Both hash-tables can have "`preFunction`" and "`postFunction`" entries,
; which should have callbacks as values.
;
; There are 5 callbacks (called in this order);
;
; * the router `preFunction` callback is called first when there is a `prefix` match. It can
; be used to do some validations, like path parameters, etc. It is defined on `router` level.
;
; * the path `preFunction` callback is called when there is a `path` match. It can
; be used to do some validations, like path parameters, etc. It is defined on `path` level.
;
; * the `METHOD` (eg. `GET, `POST`, etc) this callback implements the specific method. It is defined
; once for each supported method on the path. The special case is method "`*`" which is a catch-all.
; The catch-all will be used for any method that doesn't have its own handler defined.
; If omitted, the default catch-all will return a "405 Method Not Allowed" error.
;
; * the path `postFunction` is called after the `METHOD` callback. This one is defined on `path` level.
;
; * the router `postFunction` is called last. This one is defined on `router` level.
;
; The callbacks have the following function signature; `stop = function(request, response)`.
; If `stop` is truthy, request handling is terminated, no further callbacks will be called.
;
; Path parameters can be defined in the path in curly braces; "`{variableName}`", and they will match
; a single path segment. The values will be made available on the Request object as
; `request.pathParameters.variableName`.
;
; The API sub-path (without the prefix) is available as on the Request object as `request.routerPath`.
;
; Route matching is based on a complete match (not prefix). And the order is based on the number
; of path-parameters defined. Least number of parameters go first, such that static paths have
; precedence over variables.
; @usage
; local routes = {
;   preFunction = Function(req, resp)
;     Local stop = False
;     ; this gets called before any path specific callback
;
;     If some_error Then
;       resp:writeDefaultErrorMessage(400)
;       stop = True
;     end
;     Return (stop)
;   EndFunction,
;
;
;   ["/my/{accountNumber}/{param2}/endpoint"] = { ; define path parameters
;
;     preFunction = Function(req, resp)
;       Local stop = False
;       ; this gets called before any method specific callback,
;       ; but after the path-preFunction
;       Return (stop)
;     EndFunction,
;
;     GET = Function(req, resp)
;       Local stop = False
;       ; this implements the main GET logic
;       Return (stop)
;     EndFunction,
;
;     POST = Function(req, resp)
;       Local stop = False
;       ; this implements the main POST logic
;       Return (stop)
;     EndFunction,
;
;     ["*"] = Function(req, resp)
;       Local stop = False
;       ; this implements the wildcard, will handle any method except for the
;       ; GET/POST ones defined above.
;
;       ; If the wildcard is not defined, then a default one will be added which
;       ; only returns a "405 Method Not Allowed" error.
;       Return (stop)
;     EndFunction,
;
;     postFunction = Function(req, resp)
;       Local stop = False
;       ; this gets called before after the method specific (or wildcard)
;       ; callback.
;
;       Return (stop)
;     EndFunction,
;   },
;
;   ["/my/endpoint"] = Function(req, resp)
;     Local stop = False
;     ; this is a shortcut to create a wildcard-method, one callback
;     ; to handle any method for this path. Identical to:
;     ; ["/my/endpoint"] = { ["*"] = function(req, resp) ... end }
;     Return (stop)
;   EndFunction,
;
;   postFunction = Function(req, resp)
;     Local stop = False
;     ; this gets called last.
;     Return (stop)
;   EndFunction,
; }
;
; local router = Router:new {
;   prefix = "/api/1v0/",
;   routes = routes,
; }


@INCLUDE "../StringLib/StringUtils.hws"

Global nopCallback = Function() Return (False) EndFunction

Function methodNotAllowed(req, res)
	DebugPrint("methodNotAllowed()")
    res:WriteDefaultErrorMessage(405)
    Return (False)
EndFunction

Function ParseRoutes(self, routes, prefix)
	DebugPrint("ParseRoutes()")
    Local rts = {}
    Local routerPreFunction = IIf(GetType(RawGet(routes, "prefunction")) = #FUNCTION, RawGet(routes, "prefunction"), Function(req, res) EndFunction)
    Local routerPostFunction = IIf(GetType(RawGet(routes, "postfunction")) = #FUNCTION, RawGet(routes, "postfunction"), Function(req, res) EndFunction)

    For path, methods In Pairs(routes)
        If path <> "prefunction" And path <> "postfunction"
            If Not StringUtils.StartsWith(path, "/")
                Error("paths must start with '/', got: " .. path)
            EndIf

            If GetType(methods) = #FUNCTION
                methods = { ["*"] = methods }
            EndIf

			If Not HaveItem(methods, "*") Then methods["*"] = methodNotAllowed
			

            Local m = {}
            For method, callback In Pairs(methods)
                If GetType(callback) <> #FUNCTION
                    Error("expected callback to be a function, got: " .. GetType(callback))
                EndIf

                If method <> "prefunction" And method <> "postfunction"
                    If method <> LowerStr(method)
                        Error("Expected method to be all-caps, got: " .. ToString(method))
                    EndIf

                    If method <> "*"
                        m[method] = callback
                    Else
                        ; a "catch all"; '*', so add metamethod to return the catch all
                        SetMetaTable(m, {
                            __index = Function(self, key)
                                Return (callback)
                            EndFunction
                        })
                    EndIf
                EndIf
            Next

            Local params = {}
            Local pattern = PatternReplaceStr(path, "{(%w+)}", Function(name)
                params[TableItems(params)] = name
                Return ("([^/]+)")
            EndFunction)
            pattern = "^" .. pattern .. "$"
			
			Local rtsRouterPreFunction = nopCallback
			If GetType(RawGet(methods, "routerprefunction")) = #FUNCTION Then rtsRouterPreFunction = RawGet(methods, "routerprefunction")
			Local rtsPreFunction = nopCallback
			If GetType(RawGet(methods, "prefunction")) = #FUNCTION Then rtsPreFunction = RawGet(methods, "prefunction")
			Local rtsPostFunction = nopCallback
			If GetType(RawGet(methods, "prefunction")) = #FUNCTION Then rtsPostFunction = RawGet(methods, "postfunction")
			Local rtsRouterPostFunction = nopCallback
			If GetType(RawGet(methods, "routerpostfunction")) = #FUNCTION Then rtsRouterPostFunction = RawGet(methods, "routerpostfunction")

            ; create and store the route
            rts[TableItems(rts)] = {
                pattern = pattern,
                params = params,
                methods = m,
                routerPreFunction = rtsRouterPreFunction,
                preFunction = rtsPreFunction,
                postFunction = rtsPostFunction,
                routerPostFunction = rtsRouterPostFunction
            }
        EndIf
    Next

    ; sort by number of parameters in the path, least go first
    Sort(rts, Function(a, b) Return (TableItems(a.params) < TableItems(b.params)) EndFunction)
    Return (rts)
EndFunction

Global Router = {}
Router.prefix = StringUtils.EMPTY
Router.routes = {}

;- Creates a new Router plugin instance.
; @tparam opts table the options table with the following fields;
; @tparam[opt] opts.prefix string the base path for all underlying routes.
; @tparam opts.routes table route definitions to be handled by this router plugin instance.
; @return the new plugin
Function Router:New(opts)
	DebugPrint("Router:New()")
    If GetType(opts) <> #TABLE Then opts = {}
    If Not opts.routes Then opts.routes = {}
    Local prefix = "/" .. (opts.prefix Or StringUtils.EMPTY) .. "/"
    While FindStr(prefix, "//")
        prefix = PatternReplaceStr(prefix, "//", "/")
    Wend

    Local instance = CopyTable(self)
    instance.prefix = StringUtils.Substring(prefix, 1, -2)  ; drop trailing slash
    instance.plugins = ParseRoutes(instance, opts.routes)

    Return (instance)
EndFunction

Function Router:NewRequestResponse(req, res)
	DebugPrint("Router:NewRequestResponse()")
    Local stop = False

    Local path = req:Path()
    If StringUtils.Substring(path, 1, StringUtils.StringLength(self.prefix)) <> self.prefix
        Return (stop)
    EndIf

    path = StringUtils.Substring(path, StringUtils.StringLength(self.prefix) + 1, -1)

    For _, route In IPairs(self.routes)
        Local matches = { PatternFindStrShort(path, route.pattern) }
        If Not IsNil(matches[1])
            ; we have a match
            Local p = {}
            For i, paramName In IPairs(route.params)
                p[paramName] = matches[i]
            Next

            req.pathParameters = p
            req.routerPath = path   ; the request path without the prefix

            stop = route.routerPreFunction(req, res)
            If stop Then Break
            stop = route.preFunction(req, res)
            If stop Then Break
            stop = route.methods[req:Method()](req, res)
            If stop Then Break
            stop = route.postFunction(req, res)
            If stop Then Break
            route.routerPostFunction(req, res)
            stop = True
            Break
        EndIf
    Next

    Return (stop)
EndFunction
